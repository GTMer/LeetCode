//The problem takes me 3.5 h, after about one h ,i sensed than if one cut has been determinded the cut in another array was determined too.
//just consider if this cut can work, otherwiser move the cut by binary search
//very verbose notwithstanding, beats 77.98% of submissions.
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int l1 = nums1.size(), l2 = nums2.size();
        if(nums1.size() == 0){
            return nums2.size() % 2 == 1 ? nums2[nums2.size() / 2] : (double)(nums2[l2/2-1] + nums2[l2/2]) / 2;
        }
        
        if((l1 + l2) % 2 == 1){
            int low = max((l1 - l2 - 1) / 2, 0);
            int hig = min((l1 + l2 - 1) / 2, l1);
            while(true){
                int p = (low + hig) / 2;
                int q = (l1 + l2 -1) / 2 - p;
                if((q > 0 ? nums2[q - 1] <= nums1[p] : true) && (q < l2 ? nums2[q] >= nums1[p] : true) && p < l1){
                    return nums1[p];
                }
                if((p > 0 ? nums1[p - 1] <= nums2[q] : true) && (p < l1 ? nums1[p] >= nums2[q] : true) && q < l2){
                    return nums2[q];
                }
                if(q > 0 && nums2[q - 1] > nums1[p]){
                    low = p + 1;
                }
                else
                    hig = p - 1;
            }
        }
        
        else{
            if(l1 == 1 && l2 == 1){
                return (double)(nums1[0] + nums2[0]) / 2;
            }
            int low = max((l1 - l2) / 2, 0);
            int hig = min((l1 + l2) / 2, l1);
            while(true){
                int p = (low + hig) / 2;
                int q = (l1 + l2) / 2 - p;
                if(((p > 0 && q < l2) ? nums1[p - 1] <= nums2[q] : true) && ((q > 0 && p < l1) ? nums2[q - 1] <= nums1[p] : true)){
                    int di = 0;
                    if(p == 0)
                        di = nums2[q - 1];
                    else if(q == 0)
                        di = nums1[p - 1];
                    else
                        di = max(nums2[q - 1], nums1[p - 1]);
                    int ga = 0;
                    if(p == l1)
                        ga = nums2[q];
                    else if(q == l2)
                        ga = nums1[p];
                    else
                        ga = min(nums1[p], nums2[q]);
                    return (double)(di + ga) / 2;
                }
                else if((p > 0 && q < l2) ? nums1[p - 1] > nums2[q] : false){
                    hig = p - 1;
                }
                else
                    low = p + 1;
            }
        }
        return 0;
    }
};
