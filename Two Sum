//code beats 90%(12ms), sort the map O(nlogn), then "two-ends finding".
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int  ** remap = new int * [nums.size()];
        for(int i = 0; i < nums.size(); i++) {
            remap[i] = new int[2];
            remap[i][0] = nums[i];
            remap[i][1] = i;
        }
        sort(remap, remap + nums.size(), [](int a[], int b[]){return a[0] < b[0];});  //lambda function
        int a = 0, b = nums.size() - 1;
        while(a < b){
            if(remap[a][0] + remap[b][0] == target)
                return {remap[a][1], remap[b][1]};
            while(remap[a][0] + remap[b][0] > target)
                b--;
            while(remap[a][0] + remap[b][0] < target)
                a++;
        }
        return {0, 0};
    }
};

//using unordered_map, theoretically O(n), but only beats 62%(16ms).
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> res;
        unordered_map<int, int> ns;
        for (int i = 0; i < nums.size(); i++) {
            ns[nums[i]] = i;
        }
        for (int i = 0; i < nums.size(); i++) {
            if(ns.find(target - nums[i]) != ns.end()){
                res.push_back(i);
                res.push_back(ns[target - nums[i]]);
                if(res[0] == res[1]){
                    int count = 0;
                    for(int i = 0; i < nums.size(); i++){
                        if(nums[i] == res[0])
                            count++;
                    }
                    if(count <= 1){
                        res.clear();
                        continue;
                    }
                }
                return res;
            }
        }
        return res;
    }
};
